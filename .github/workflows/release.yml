name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  APP_NAME: UnclutterPlus
  BUILD_PATH: .build/release

permissions:
  contents: write
  
jobs:
  build-and-release:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build Release
      run: |
        echo "Building ${{ env.APP_NAME }} ${{ steps.version.outputs.VERSION }}"
        swift build -c release --arch arm64 --arch x86_64
        
    - name: Create App Bundle
      run: |
        # 创建应用包结构
        mkdir -p "${{ env.APP_NAME }}.app/Contents/MacOS"
        mkdir -p "${{ env.APP_NAME }}.app/Contents/Resources"
        
        # 复制可执行文件 (检查通用二进制构建路径)
        if [ -f ".build/apple/Products/Release/${{ env.APP_NAME }}" ]; then
          cp ".build/apple/Products/Release/${{ env.APP_NAME }}" "${{ env.APP_NAME }}.app/Contents/MacOS/"
        elif [ -f "${{ env.BUILD_PATH }}/${{ env.APP_NAME }}" ]; then
          cp "${{ env.BUILD_PATH }}/${{ env.APP_NAME }}" "${{ env.APP_NAME }}.app/Contents/MacOS/"
        else
          echo "❌ Error: Cannot find executable file"
          find .build -name "${{ env.APP_NAME }}" -type f
          exit 1
        fi
        
        # 复制 Info.plist
        cp "Sources/${{ env.APP_NAME }}/Info.plist" "${{ env.APP_NAME }}.app/Contents/"
        
        # 复制图标文件
        if [ -f "Sources/${{ env.APP_NAME }}/Resources/${{ env.APP_NAME }}.icns" ]; then
          cp "Sources/${{ env.APP_NAME }}/Resources/${{ env.APP_NAME }}.icns" "${{ env.APP_NAME }}.app/Contents/Resources/"
          echo "✅ App icon included"
        else
          echo "⚠️  Warning: No app icon found"
        fi
        
        # 更新 Info.plist 中的版本信息
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.version.outputs.VERSION }}" "${{ env.APP_NAME }}.app/Contents/Info.plist"
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ steps.version.outputs.VERSION }}" "${{ env.APP_NAME }}.app/Contents/Info.plist"
        
        # 设置可执行权限
        chmod +x "${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}"
        
        echo "App bundle created successfully"
        ls -la "${{ env.APP_NAME }}.app/Contents/"
        
    - name: Code Sign (Optional)
      run: |
        # 如果有开发者证书，可以在这里进行代码签名
        # codesign --force --deep --sign "Developer ID Application: Your Name" "${{ env.APP_NAME }}.app"
        echo "Skipping code signing (add your certificate if needed)"
        
    - name: Create DMG
      run: |
        # 创建临时 DMG 目录
        mkdir -p dmg-temp
        cp -R "${{ env.APP_NAME }}.app" dmg-temp/
        
        # 创建 DMG
        hdiutil create -size 200m -fs HFS+ -volname "${{ env.APP_NAME }}" temp.dmg
        hdiutil attach temp.dmg -mountpoint /Volumes/${{ env.APP_NAME }}
        
        # 复制应用到 DMG
        cp -R dmg-temp/* "/Volumes/${{ env.APP_NAME }}/"
        
        # 创建 Applications 文件夹的符号链接
        ln -s /Applications "/Volumes/${{ env.APP_NAME }}/Applications"
        
        # 卸载临时 DMG
        hdiutil detach "/Volumes/${{ env.APP_NAME }}"
        
        # 创建最终的压缩 DMG
        hdiutil convert temp.dmg -format UDZO -o "${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}.dmg"
        
        # 清理临时文件
        rm temp.dmg
        rm -rf dmg-temp
        
        echo "DMG created successfully"
        ls -la *.dmg
        
    - name: Create Release Archive
      run: |
        # 创建源代码归档
        git archive --format=zip --prefix="${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}/" HEAD > "${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-source.zip"
        
        # 创建二进制归档
        zip -r "${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-macos.zip" "${{ env.APP_NAME }}.app"
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        # 从 CHANGELOG.md 提取发布说明
        if [[ -f "CHANGELOG.md" ]]; then
          # 提取当前版本的发布说明
          VERSION_NUMBER="${{ steps.version.outputs.VERSION }}"
          VERSION_NUMBER=${VERSION_NUMBER#v}  # 移除 'v' 前缀
          
          # 查找当前版本的部分
          awk "/## \[$VERSION_NUMBER\]/{flag=1; next} /## \[/{if(flag) exit} flag" CHANGELOG.md > release_notes.txt
          
          # 如果没有找到当前版本的说明，生成默认内容
          if [[ ! -s release_notes.txt ]]; then
            echo "## UnclutterPlus ${{ steps.version.outputs.VERSION }}" > release_notes.txt
            echo "" >> release_notes.txt
            echo "一款现代化的 macOS 生产力应用，灵感来源于 Unclutter，提供增强的文件管理、剪贴板历史和 Markdown 笔记功能。" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### 主要功能" >> release_notes.txt
            echo "- 🗂️ **文件管理**: 临时文件存储，支持拖拽操作和智能文件图标" >> release_notes.txt
            echo "- 📋 **剪贴板历史**: 多格式支持，智能搜索，持久化存储" >> release_notes.txt
            echo "- 📝 **Markdown 笔记**: 实时预览，语法高亮，自动保存" >> release_notes.txt
            echo "- 🖥️ **系统集成**: 屏幕边缘手势触发，多屏幕支持，流畅动画" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### 系统要求" >> release_notes.txt
            echo "- macOS 12.0 或更高版本" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### 安装说明" >> release_notes.txt
            echo "1. 下载 DMG 文件" >> release_notes.txt
            echo "2. 双击打开，将 UnclutterPlus 拖拽到应用程序文件夹" >> release_notes.txt
            echo "3. 启动应用，鼠标移至屏幕顶部边缘并向下滑动或滚轮即可激活" >> release_notes.txt
          fi
        else
          echo "## ${{ env.APP_NAME }} ${{ steps.version.outputs.VERSION }}" > release_notes.txt
          echo "- 新版本发布，包含最新功能和改进" >> release_notes.txt
        fi
        
        echo "Release notes:"
        cat release_notes.txt
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.TAG_NAME }}
        name: ${{ env.APP_NAME }} ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.txt
        files: |
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}.dmg
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-source.zip
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-macos.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}
        path: |
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}.dmg
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-source.zip
          ${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION }}-macos.zip
        retention-days: 30